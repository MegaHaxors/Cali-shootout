local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Cali Shootout ðŸ’¥",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Loading script",
   LoadingSubtitle = "by NEGAHAXX",
   Theme = "Bloom", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "k9KPDqfmrk", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "you need a key :)",
      Subtitle = "Key System",
      Note = "Join Discord for a key gg.k9KPDqfmrk", -- Use this to tell the user how to get a key
      FileName = "cali key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"g"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("Main", "star")


local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local aimlockEnabled = false
local targetPlayer = nil

-- Function to find the closest player's head
local function getClosestPlayer()
    local closestDistance = math.huge
    local closestPlayer = nil

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local head = player.Character.Head
            local distance = (head.Position - Camera.CFrame.Position).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestPlayer = player
            end
        end
    end

    return closestPlayer
end

-- Create the toggle in Rayfield UI
local AimlockToggle = Tab:CreateToggle({
    Name = "Aimlock HOTKEY = Q",
    CurrentValue = false,
    Flag = "AimlockToggle",
    Callback = function(Value)
        aimlockEnabled = Value
        if not aimlockEnabled then
            targetPlayer = nil
        end
    end,
})

-- Hotkey to toggle aimlock (Q)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.Q then
        AimlockToggle:Set(not aimlockEnabled) -- This properly toggles the UI element
    end
end)

-- Main aimlock loop
RunService.RenderStepped:Connect(function()
    if aimlockEnabled then
        targetPlayer = getClosestPlayer()
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
            local targetHead = targetPlayer.Character.Head
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetHead.Position)
        end
    end
end)

----walkspeed 

-- Defaults
local defaultWS = 16
local currentWS = defaultWS

-- Main function to apply walkspeed
local function updateWS()
    local char = game.Players.LocalPlayer.Character
    if char and char:FindFirstChildOfClass("Humanoid") then
        char:FindFirstChildOfClass("Humanoid").WalkSpeed = currentWS
    end
end

-- Create slider
Tab:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 100},
    Increment = 1,
    Suffix = "studs/s",
    CurrentValue = defaultWS,
    Callback = function(value)
        currentWS = value
        updateWS()
    end
})

-- Reset button
Tab:CreateButton({
    Name = "Reset to Default",
    Callback = function()
        currentWS = defaultWS
        updateWS()
        Rayfield:Notify({
            Title = "Reset Complete",
            Content = "WalkSpeed set to default (16)",
            Duration = 2
        })
    end
})

-- Auto-apply when character respawns
game.Players.LocalPlayer.CharacterAdded:Connect(function()
    task.wait(0.5) -- Wait for humanoid to load
    updateWS()
end)

-- Apply immediately
updateWS()















----fly


-- Variables
local speeds = 1
local nowe = false
local tpwalking = false
local speaker = game:GetService("Players").LocalPlayer



-- Fly Toggle
local FlyToggle = Tab:CreateToggle({
   Name = "Fly",
   CurrentValue = false,
   Flag = "FlyToggle",
   Callback = function(Value)
        nowe = Value
        
        if nowe == true then
            -- Enable fly
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming,false)
            speaker.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
            
            game.Players.LocalPlayer.Character.Animate.Disabled = true
            local Char = game.Players.LocalPlayer.Character
            local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

            for i,v in next, Hum:GetPlayingAnimationTracks() do
                v:AdjustSpeed(0)
            end
            
            for i = 1, speeds do
                spawn(function()
                    local hb = game:GetService("RunService").Heartbeat
                    tpwalking = true
                    local chr = game.Players.LocalPlayer.Character
                    local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
                    while tpwalking and hb:Wait() and chr and hum and hum.Parent do
                        if hum.MoveDirection.Magnitude > 0 then
                            chr:TranslateBy(hum.MoveDirection)
                        end
                    end
                end)
            end
            
            -- R6/R15 handling
            if game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid").RigType == Enum.HumanoidRigType.R6 then
                local plr = game.Players.LocalPlayer
                local torso = plr.Character.Torso
                local deb = true
                local ctrl = {f = 0, b = 0, l = 0, r = 0}
                local lastctrl = {f = 0, b = 0, l = 0, r = 0}
                local maxspeed = 50
                local speed = 0

                local bg = Instance.new("BodyGyro", torso)
                bg.P = 9e4
                bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
                bg.cframe = torso.CFrame
                local bv = Instance.new("BodyVelocity", torso)
                bv.velocity = Vector3.new(0,0.1,0)
                bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
                plr.Character.Humanoid.PlatformStand = true
                
                coroutine.wrap(function()
                    while nowe == true and game:GetService("Players").LocalPlayer.Character.Humanoid.Health > 0 do
                        game:GetService("RunService").RenderStepped:Wait()

                        if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
                            speed = speed+.5+(speed/maxspeed)
                            if speed > maxspeed then
                                speed = maxspeed
                            end
                        elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
                            speed = speed-1
                            if speed < 0 then
                                speed = 0
                            end
                        end
                        if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
                            bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
                            lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
                        elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
                            bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
                        else
                            bv.velocity = Vector3.new(0,0,0)
                        end
                        bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
                    end
                    
                    ctrl = {f = 0, b = 0, l = 0, r = 0}
                    lastctrl = {f = 0, b = 0, l = 0, r = 0}
                    speed = 0
                    if bg then bg:Destroy() end
                    if bv then bv:Destroy() end
                    plr.Character.Humanoid.PlatformStand = false
                end)()
            else
                -- R15 handling
                local plr = game.Players.LocalPlayer
                local UpperTorso = plr.Character.UpperTorso
                local deb = true
                local ctrl = {f = 0, b = 0, l = 0, r = 0}
                local lastctrl = {f = 0, b = 0, l = 0, r = 0}
                local maxspeed = 50
                local speed = 0

                local bg = Instance.new("BodyGyro", UpperTorso)
                bg.P = 9e4
                bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
                bg.cframe = UpperTorso.CFrame
                local bv = Instance.new("BodyVelocity", UpperTorso)
                bv.velocity = Vector3.new(0,0.1,0)
                bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
                plr.Character.Humanoid.PlatformStand = true
                
                coroutine.wrap(function()
                    while nowe == true and game:GetService("Players").LocalPlayer.Character.Humanoid.Health > 0 do
                        wait()

                        if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
                            speed = speed+.5+(speed/maxspeed)
                            if speed > maxspeed then
                                speed = maxspeed
                            end
                        elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
                            speed = speed-1
                            if speed < 0 then
                                speed = 0
                            end
                        end
                        if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
                            bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
                            lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
                        elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
                            bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
                        else
                            bv.velocity = Vector3.new(0,0,0)
                        end

                        bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
                    end
                    
                    ctrl = {f = 0, b = 0, l = 0, r = 0}
                    lastctrl = {f = 0, b = 0, l = 0, r = 0}
                    speed = 0
                    if bg then bg:Destroy() end
                    if bv then bv:Destroy() end
                    plr.Character.Humanoid.PlatformStand = false
                end)()
            end
        else
            -- Disable fly
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming,true)
            speaker.Character.Humanoid:ChangeState(Enum.HumanoidStateType.RunningNoPhysics)
            
            game.Players.LocalPlayer.Character.Animate.Disabled = false
            tpwalking = false
        end
   end,
})

-- Speed Slider
local SpeedSlider = Tab:CreateSlider({
   Name = "Fly Speed",
   Range = {1, 20},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 1,
   Flag = "FlySpeed",
   Callback = function(Value)
        speeds = Value
        if nowe == true then
            tpwalking = false
            for i = 1, speeds do
                spawn(function()
                    local hb = game:GetService("RunService").Heartbeat
                    tpwalking = true
                    local chr = game.Players.LocalPlayer.Character
                    local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
                    while tpwalking and hb:Wait() and chr and hum and hum.Parent do
                        if hum.MoveDirection.Magnitude > 0 then
                            chr:TranslateBy(hum.MoveDirection)
                        end
                    end
                end)
            end
        end
   end,
})

-- Character added event
game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(char)
    wait(0.7)
    game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
    game.Players.LocalPlayer.Character.Animate.Disabled = false
    FlyToggle:Set(false)
end)

-- Keybind for fly (optional)
local FlyKeybind = Tab:CreateKeybind({
   Name = "Fly Toggle Keybind",
   CurrentKeybind = "F",
   HoldToInteract = false,
   Flag = "FlyKeybind",
   Callback = function(Keybind)
        FlyToggle:Set(not FlyToggle.CurrentValue)
   end,
})


-----noclip




local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local noclipActive = false
local noclipConnection = nil

-- Noclip function
local function toggleNoclip()
    noclipActive = not noclipActive
    
    -- Disconnect previous connection if it exists
    if noclipConnection then
        noclipConnection:Disconnect()
        noclipConnection = nil
    end
    
    if noclipActive then
        -- Create new connection
        noclipConnection = game:GetService("RunService").Stepped:Connect(function()
            if character then
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
        Rayfield:Notify({
            Title = "Noclip Activated",
            Content = "You can now walk through walls",
            Duration = 3,
            Image = 4483362458,
        })
    else
        -- Reset collisions
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
        Rayfield:Notify({
            Title = "Noclip Deactivated",
            Content = "Collisions restored",
            Duration = 3,
            Image = 4483362458,
        })
    end
end

-- Create the single button
Tab:CreateButton({
    Name = "Noclip (Click to Toggle)",
    Callback = function()
        toggleNoclip()
    end,
})

-- Handle character respawns
player.CharacterAdded:Connect(function(newChar)
    character = newChar
    if noclipActive then
        -- Reapply noclip if it was active
        if noclipConnection then
            noclipConnection:Disconnect()
        end
        noclipConnection = game:GetService("RunService").Stepped:Connect(function()
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end)
    end
end)

-----fov


-- Default FOV values
local defaultFOV = 70
local currentFOV = workspace.CurrentCamera.FieldOfView
local fovEnabled = false

-- FOV Toggle
local FOVToggle = Tab:CreateToggle({
    Name = "Enable FOV Changer",
    CurrentValue = fovEnabled,
    Flag = "FOVToggle",
    Callback = function(Value)
        fovEnabled = Value
        if fovEnabled then
            workspace.CurrentCamera.FieldOfView = currentFOV
            Rayfield:Notify({
                Title = "FOV Changer Enabled",
                Content = "Field of view modified",
                Duration = 2,
                Image = 4483362458,
            })
        else
            workspace.CurrentCamera.FieldOfView = defaultFOV
            Rayfield:Notify({
                Title = "FOV Changer Disabled",
                Content = "Field of view reset to default",
                Duration = 2,
                Image = 4483362458,
            })
        end
    end,
})

-- FOV Slider
local FOVSlider = Tab:CreateSlider({
    Name = "FOV Value",
    Range = {1, 120},
    Increment = 1,
    Suffix = "FOV",
    CurrentValue = defaultFOV,
    Flag = "FOVSlider",
    Callback = function(Value)
        currentFOV = Value
        if fovEnabled then
            workspace.CurrentCamera.FieldOfView = currentFOV
        end
    end,
})

-- Reset FOV Button
local ResetButton = Tab:CreateButton({
    Name = "Reset to Default FOV",
    Callback = function()
        currentFOV = defaultFOV
        FOVSlider:Set(defaultFOV)
        if fovEnabled then
            workspace.CurrentCamera.FieldOfView = defaultFOV
        end
        Rayfield:Notify({
            Title = "FOV Reset",
            Content = "Field of view reset to "..defaultFOV,
            Duration = 2,
            Image = 4483362458,
        })
    end,
})

-- Camera changed event (for games that change cameras)
workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
    if workspace.CurrentCamera then
        if fovEnabled then
            workspace.CurrentCamera.FieldOfView = currentFOV
        else
            workspace.CurrentCamera.FieldOfView = defaultFOV
        end
    end
end)

-- Set initial FOV
if fovEnabled then
    workspace.CurrentCamera.FieldOfView = currentFOV
else
    workspace.CurrentCamera.FieldOfView = defaultFOV
end



---gun stuff











----vaihtuu


local ESPEnabled = false
local CharmsEnabled = false
local NameESPColor = Color3.fromRGB(255, 255, 255)
local CharmColor = Color3.fromRGB(255, 0, 0)

local BillboardInstances = {}
local CharmInstances = {}

local Tab = Window:CreateTab("ESP", "eye")

-- Name ESP Toggle
Tab:CreateToggle({
    Name = "Enable Name ESP",
    CurrentValue = false,
    Flag = "NameESP_Toggle",
    Callback = function(Value)
        ESPEnabled = Value
        if Value then
            EnableNameESP()
        else
            DisableNameESP()
        end
    end,
})

-- Charm Toggle
Tab:CreateToggle({
    Name = "Enable Charms",
    CurrentValue = false,
    Flag = "Charm_Toggle",
    Callback = function(Value)
        CharmsEnabled = Value
        if Value then
            EnableCharms()
        else
            DisableCharms()
        end
    end,
})

-- Name ESP Color Picker
Tab:CreateColorPicker({
    Name = "Name ESP Color",
    Color = NameESPColor,
    Flag = "NameESP_Color",
    Callback = function(Value)
        NameESPColor = Value
        for _, v in pairs(BillboardInstances) do
            v.Label.TextColor3 = Value
        end
    end,
})

-- Charm Color Picker
Tab:CreateColorPicker({
    Name = "Charm Color",
    Color = CharmColor,
    Flag = "Charm_Color",
    Callback = function(Value)
        CharmColor = Value
        for _, v in pairs(CharmInstances) do
            v.FillColor = Value
            v.OutlineColor = Value
        end
    end,
})

-- Create Name ESP Billboard
function CreateNameESP(player)
    if player == game.Players.LocalPlayer or BillboardInstances[player] then return end
    local char = player.Character
    if char and char:FindFirstChild("Head") then
        local billboard = Instance.new("BillboardGui")
        billboard.Name = "NameESP"
        billboard.Adornee = char.Head
        billboard.Size = UDim2.new(0, 200, 0, 50)
        billboard.AlwaysOnTop = true
        billboard.StudsOffset = Vector3.new(0, 2, 0)

        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, 0, 1, 0)
        label.BackgroundTransparency = 1
        label.TextColor3 = NameESPColor
        label.TextStrokeTransparency = 0.5
        label.TextScaled = true
        label.Font = Enum.Font.SourceSansBold
        label.Text = player.Name
        label.Parent = billboard

        billboard.Parent = char.Head
        BillboardInstances[player] = { GUI = billboard, Label = label }
    end
end

-- Create Charm (Highlight-based)
function CreateCharm(player)
    if player == game.Players.LocalPlayer or CharmInstances[player] then return end
    local char = player.Character
    if char then
        local highlight = Instance.new("Highlight")
        highlight.Name = "CharmHighlight"
        highlight.FillColor = CharmColor
        highlight.OutlineColor = CharmColor
        highlight.FillTransparency = 0.75
        highlight.OutlineTransparency = 0
        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        highlight.Adornee = char
        highlight.Parent = char
        CharmInstances[player] = highlight
    end
end

-- Enable Name ESP
function EnableNameESP()
    for _, player in ipairs(game.Players:GetPlayers()) do
        CreateNameESP(player)
    end
    game.Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function()
            wait(1)
            if ESPEnabled then CreateNameESP(player) end
        end)
    end)
    game:GetService("RunService").RenderStepped:Connect(function()
        if not ESPEnabled then return end
        for player, data in pairs(BillboardInstances) do
            if player.Character and player.Character:FindFirstChild("Head") then
                local dist = math.floor((player.Character.Head.Position - game.Players.LocalPlayer.Character.Head.Position).Magnitude)
                data.Label.Text = player.Name .. " [" .. dist .. "m]"
            end
        end
    end)
end

-- Disable Name ESP
function DisableNameESP()
    for _, v in pairs(BillboardInstances) do
        if v.GUI then v.GUI:Destroy() end
    end
    BillboardInstances = {}
end

-- Enable Charms
function EnableCharms()
    for _, player in ipairs(game.Players:GetPlayers()) do
        CreateCharm(player)
    end
    game.Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function()
            wait(1)
            if CharmsEnabled then CreateCharm(player) end
        end)
    end)
end

-- Disable Charms
function DisableCharms()
    for _, v in pairs(CharmInstances) do
        if v then v:Destroy() end
    end
    CharmInstances = {}
end





----alkaaa









local Tab = Window:CreateTab("Gun Stuff", "crosshair")








local rapidFireActive = false
local originalValues = {}

Tab:CreateToggle({
    Name = "Rapid Fire",
    CurrentValue = false,
    Flag = "RapidFireToggle",
    Callback = function(Value)
        rapidFireActive = Value
        
        if rapidFireActive then
            -- Store original values and modify
            for _, v in pairs(getgc(true)) do
                if type(v) == "table" then
                    if not originalValues[v] then
                        originalValues[v] = {
                            FireRate = rawget(v, "FireRate"),
                            Damage = rawget(v, "Damage"),
                            Spread = rawget(v, "Spread")
                        }
                    end
                    
                    if rawget(v, "FireRate") then
                        v.FireRate = 0.01
                    end
                    if rawget(v, "Damage") then
                        v.Damage = (originalValues[v].Damage or v.Damage) * 3
                    end
                    if rawget(v, "Spread") then
                        v.Spread = 0
                    end
                end
            end
            Rayfield:Notify({
                Title = "Rapid Fire ON",
                Content = "All weapons modified",
                Duration = 2,
                Image = 6023426915
            })
        else
            -- Restore original values
            for v, values in pairs(originalValues) do
                if type(v) == "table" then
                    if values.FireRate ~= nil then
                        v.FireRate = values.FireRate
                    end
                    if values.Damage ~= nil then
                        v.Damage = values.Damage
                    end
                    if values.Spread ~= nil then
                        v.Spread = values.Spread
                    end
                end
            end
            Rayfield:Notify({
                Title = "Rapid Fire OFF",
                Content = "Weapons restored to normal",
                Duration = 2,
                Image = 6023426915
            })
        end
    end
})















-------------------weed farm

local Tab = Window:CreateTab("Autofarms", "Box")

local WeedAutofarm = {
    Enabled = false,
    Connection = nil,
    Loop = nil
}

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local VirtualInputManager = game:GetService("VirtualInputManager")
local ProximityPromptService = game:GetService("ProximityPromptService")
local TweenService = game:GetService("TweenService")

-- Enable instant ProximityPrompt interactions
local function setupInstantInteract()
    WeedAutofarm.Connection = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
        fireproximityprompt(prompt)
    end)
end

-- Function to simulate pressing the "G" key multiple times
local function spamGKey(times)
    for i = 1, times do
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.G, false, game)
        task.wait(0.05)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.G, false, game)
        task.wait(0.1)
    end
end

-- Function to simulate pressing the "2" key
local function pressTwoKey()
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Two, false, game)
    task.wait(0.1)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Two, false, game)
end

-- Function to teleport with optional tween
local function teleportTo(cframe, useTween)
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")
    
    if useTween then
        local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
        local tween = TweenService:Create(rootPart, tweenInfo, {CFrame = cframe})
        tween:Play()
        tween.Completed:Wait()
    else
        rootPart.CFrame = cframe
    end
end

-- Main sequence of actions
local function executeSequence()
    -- First location
    teleportTo(CFrame.new(-1989.63306, 3.48964143, 179.738205, -0.998382568, 9.85573436e-08, -0.0568526909, 9.35966469e-08, 1, 8.99180392e-08, 0.0568526909, 8.44513792e-08, -0.998382568))
    spamGKey(3)
    task.wait(0.1)
    
    -- Second location
    teleportTo(CFrame.new(-1985.85876, 3.48964119, 179.786514, -0.999752522, 3.23747109e-08, -0.0222472269, 3.48080498e-08, 1, -1.08989937e-07, 0.0222472269, -1.09737343e-07, -0.999752522))
    spamGKey(3)
    task.wait(0.1)
    
    -- Third location
    teleportTo(CFrame.new(-1981.8291, 3.48964119, 179.990097, -0.997139335, 5.16757837e-09, -0.0755857229, 6.19084117e-09, 1, -1.33034792e-08, 0.0755857229, -1.37333611e-08, -0.997139335))
    spamGKey(3)
    task.wait(0.1)
    
    -- Fourth location
    teleportTo(CFrame.new(-1975.17725, 3.48964119, 179.860672, -0.99974972, -1.28920616e-08, -0.02237086, -1.3701273e-08, 1, 3.60192836e-08, 0.02237086, 3.63167771e-08, -0.99974972))
    spamGKey(3)
    task.wait(0.1)
    
    -- Fifth location
    teleportTo(CFrame.new(-1971.64502, 3.48964167, 179.899475, -0.998204827, 8.58194049e-09, -0.0598928332, 7.31150873e-09, 1, 2.14308979e-08, 0.0598928332, 2.09545181e-08, -0.998204827))
    spamGKey(3)
    task.wait(0.1)
    
    -- Sixth location
    teleportTo(CFrame.new(-1967.5918, 3.48964119, 179.78598, -0.999817908, 1.10424729e-07, -0.019081533, 1.10794957e-07, 1, -1.83455846e-08, 0.019081533, -2.04563815e-08, -0.999817908))
    spamGKey(3)
    pressTwoKey()
    task.wait(0.2)
    pressTwoKey()
    task.wait(0.2)
    
    -- Seventh location
    teleportTo(CFrame.new(-2005.6377, 9.93280983, 194.016968, -0.999268055, -4.2814321e-09, -0.0382543132, -3.81344156e-09, 1, -1.23066295e-08, 0.0382543132, -1.21517401e-08, -0.999268055))
    pressTwoKey()
    task.wait(0.2)
    pressTwoKey()
    task.wait(0.2)
    
    -- Eighth location
    teleportTo(CFrame.new(-2004.55762, 10.6196537, 198.591934, -0.994431734, 1.4954793e-08, 0.105382577, 2.17231708e-08, 1, 6.30789145e-08, -0.105382577, 6.50169198e-08, -0.994431734))
    
    -- Ninth location
    teleportTo(CFrame.new(-2003.28674, 3.48964119, 195.094955, -0.942500949, -1.06537748e-08, -0.334203511, 2.62002953e-08, 1, -1.05766624e-07, 0.334203511, -1.08441377e-07, -0.942500949))
    pressTwoKey()
    task.wait(0.2)
    
    -- Tenth location
    teleportTo(CFrame.new(-2006.41931, 3.48964119, 194.970398, -0.99933207, 2.45647733e-08, 0.0365436301, 2.20452634e-08, 1, -6.93481752e-08, -0.0365436301, -6.84962416e-08, -0.99933207))
    task.wait(0.2)
    
    -- Eleventh location
    teleportTo(CFrame.new(-2005.49939, 6.29851532, 195.168335, 0.00297728367, 3.0160183e-07, -0.999995589, -4.09243597e-07, 1, 3.00384727e-07, 0.999995589, 4.08347461e-07, 0.00297728367))
    
    -- Twelfth location (with tween)
    teleportTo(CFrame.new(-2007.02783, 3.48964119, 194.999649, -0.935440838, 5.18700034e-08, 0.353483349, 6.60052848e-08, 1, 2.79335115e-08, -0.353483349, 4.94619137e-08, -0.935440838), true)
    task.wait(0.2)
    
    -- Thirteenth location (with tween)
    teleportTo(CFrame.new(-2002.58777, 3.48964119, 195.274658, -0.998819947, 3.93399507e-10, -0.0485670231, 3.30136363e-09, 1, -5.97950631e-08, 0.0485670231, -5.98848402e-08, -0.998819947), true)
    task.wait(0.2)
    
    -- Fourteenth location (with tween)
    teleportTo(CFrame.new(-2007.02783, 3.48964119, 194.999649, -0.935440838, 5.18700034e-08, 0.353483349, 6.60052848e-08, 1, 2.79335115e-08, -0.353483349, 4.94619137e-08, -0.935440838), true)
end

-- Create the toggle in Rayfield
local WeedToggle = Tab:CreateToggle({
    Name = "Weed Autofarm",
    CurrentValue = false,
    Flag = "WeedAutofarmToggle",
    Callback = function(Value)
        WeedAutofarm.Enabled = Value
        
        if Value then
            -- Start farming
            Rayfield:Notify({
                Title = "Weed Autofarm",
                Content = "Started farming weed!",
                Duration = 3,
                Image = "leaf"
            })
            
            -- Setup instant interactions
            setupInstantInteract()
            
            -- Start farming loop
            WeedAutofarm.Loop = task.spawn(function()
                while WeedAutofarm.Enabled do
                    local success, err = pcall(executeSequence)
                    if not success then
                        warn("Error in sequence: "..tostring(err))
                    end
                    task.wait(0.5)
                end
            end)
        else
            -- Stop farming
            if WeedAutofarm.Connection then
                WeedAutofarm.Connection:Disconnect()
                WeedAutofarm.Connection = nil
            end
            
            if WeedAutofarm.Loop then
                task.cancel(WeedAutofarm.Loop)
                WeedAutofarm.Loop = nil
            end
            
            Rayfield:Notify({
                Title = "Weed Autofarm",
                Content = "Stopped farming weed!",
                Duration = 3,
                Image = "circle-slash"
            })
        end
    end
})



----box

local InstantTeleport = {
    Enabled = false,
    Connection = nil,
    Loop = nil
}

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local VirtualInputManager = game:GetService("VirtualInputManager")
local ProximityPromptService = game:GetService("ProximityPromptService")

-- Function to simulate holding the "E" key
local function holdEKey()
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
    task.wait(0.1)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
end

-- Function to press the "2" key
local function pressTwoKey()
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Two, false, game)
    task.wait(0.1)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Two, false, game)
end

-- Main sequence of actions
local function executeSequence()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    
    -- First teleport
    character:SetPrimaryPartCFrame(CFrame.new(-1942.1106, 3.40753174, -51.9200287, 
        0.67291528, -4.99766912e-08, 0.73971957, 
        -9.16612386e-09, 1, 7.59000045e-08, 
        -0.73971957, -5.78546313e-08, 0.67291528))
    task.wait(0.1)
    
    -- Press E key
    holdEKey()
    task.wait(0.2)
    
    -- Press 2 key
    pressTwoKey()
    task.wait(0.2)
    
    -- Second teleport
    character:SetPrimaryPartCFrame(CFrame.new(-1926.30103, 3.10753107, -18.4836063, 
        0.271559983, 8.34334273e-08, -0.962421536, 
        -2.04739905e-08, 1, 8.09141412e-08, 
        0.962421536, -2.26843433e-09, 0.271559983))
    task.wait(1)
end

-- Create the toggle in Rayfield
local TeleportToggle = Tab:CreateToggle({
    Name = "Box Autofarm",
    CurrentValue = false,
    Flag = "InstantTeleportToggle",
    Callback = function(Value)
        InstantTeleport.Enabled = Value
        
        if Value then
            -- Start sequence
            Rayfield:Notify({
                Title = "Box Autofarm",
                Content = "Started Box Autofarm!",
                Duration = 3,
                Image = "Box"
            })
            
            -- Setup instant interactions
            InstantTeleport.Connection = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
                fireproximityprompt(prompt)
            end)
            
            -- Start sequence loop
            InstantTeleport.Loop = task.spawn(function()
                while InstantTeleport.Enabled do
                    local success, err = pcall(executeSequence)
                    if not success then
                        warn("Error in sequence: "..tostring(err))
                    end
                end
            end)
        else
            -- Stop sequence
            if InstantTeleport.Connection then
                InstantTeleport.Connection:Disconnect()
                InstantTeleport.Connection = nil
            end
            
            if InstantTeleport.Loop then
                task.cancel(InstantTeleport.Loop)
                InstantTeleport.Loop = nil
            end
            
            Rayfield:Notify({
                Title = "Box Autofarm",
                Content = "Stopped Box Autofarm!",
                Duration = 3,
                Image = "circle-slash"
            })
        end
    end
})





-----Mop Farm

-- Variables to control the farming
local farming = false
local farmingThread

-- Original mop farm functions
local ProximityPromptService = game:GetService("ProximityPromptService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local workspace = game:GetService("Workspace")

-- Enable instant interaction for ProximityPrompts
local instantInteractEnabled = true

-- Function to simulate pressing "E"
local function simulateEKeyPress()
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
    wait(0.1)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
end

-- Function to fire the ProximityPrompt instantly when triggered
ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt, player)
    if instantInteractEnabled then
        fireproximityprompt(prompt)
    end
end)

-- Function to move the player to a random Dirt part
local function moveToRandomDirt()
    -- Find all Dirt parts in the game
    local dirtParts = {}
    for _, model in pairs(workspace:GetDescendants()) do
        if model:IsA("Model") and model.Name == "Dirt" then
            local mainPart = model:FindFirstChild("Main")
            if mainPart then
                table.insert(dirtParts, mainPart)
            end
        end
    end

    -- If there are Dirt parts, select a random one
    if #dirtParts > 0 then
        local randomDirt = dirtParts[math.random(1, #dirtParts)]
        
        -- Move player to the selected Dirt part
        local targetPosition = randomDirt.Position + Vector3.new(0, 5, 0)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(targetPosition))

            -- Wait briefly to ensure the player reaches the position
            wait(0.1)

            -- Check if the Dirt part has a ProximityPrompt
            local proximityPrompt = randomDirt:FindFirstChildWhichIsA("ProximityPrompt")
            if proximityPrompt then
                fireproximityprompt(proximityPrompt)
                simulateEKeyPress()
            end
        end
    end
end

-- Function to start farming
local function startFarming()
    farming = true
    farmingThread = coroutine.create(function()
        while farming do
            moveToRandomDirt()
            wait(1)
        end
    end)
    coroutine.resume(farmingThread)
    
    Rayfield:Notify({
        Title = "Mop Autofarm Started",
        Content = "Mop Autofarm is now enabled.",
        Duration = 3,
        Image = "check-circle",
    })
end

-- Function to stop farming
local function stopFarming()
    farming = false
    if farmingThread then
        coroutine.close(farmingThread)
    end
    
    Rayfield:Notify({
        Title = "Mop Autofarmm Stopped",
        Content = "Mop Autofarm is now disabled.",
        Duration = 3,
        Image = "x-circle",
    })
end

-- Create the toggle button
local Toggle = Tab:CreateToggle({
    Name = "Auto Mop Farm",
    CurrentValue = false,
    Flag = "AutoFarmToggle",
    Callback = function(Value)
        if Value then
            startFarming()
        else
            stopFarming()
        end
    end,
})

-- Initial notification
Rayfield:Notify({
    Title = "Loaded",
    Content = "Script Loaded.",
    Duration = 5,
    Image = "info",
})











----bank 

local BankAutofarm = {
    Running = false
}

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local VirtualInputManager = game:GetService("VirtualInputManager")
local ProximityPromptService = game:GetService("ProximityPromptService")

-- ===== INSTANT INTERACTION SYSTEM (ALWAYS ACTIVE) =====
ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
    fireproximityprompt(prompt) -- Auto-trigger all proximity prompts
end)

-- ===== BANK AUTOFARM FUNCTIONS =====
local function pressEKey(times)
    for i = 1, times do
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
        task.wait(0.1)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
        task.wait(0.1)
    end
end

local function teleportTo(cframe)
    local character = LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = cframe
    end
end

local function executeBankAutofarm()
    if BankAutofarm.Running then return end
    BankAutofarm.Running = true
    
    Rayfield:Notify({
        Title = "Bank Autofarm",
        Content = "Started Bank Autofarm!",
        Duration = 3,
        Image = "banknote"
    })
    
    -- Location 1
    teleportTo(CFrame.new(-2327.35303, 3.53576565, 125.249878, 0.226575404, 9.73671703e-08, -0.973993599, -1.8764803e-08, 1, 9.56017772e-08, 0.973993599, -3.38421491e-09, 0.226575404))
    pressEKey(3)
    task.wait(0.5)
    
    -- Location 2
    teleportTo(CFrame.new(-2322.34155, 3.53576565, 131.392761, -0.0199879594, -9.19567e-08, -0.999800205, 4.9736828e-09, 1, -9.2074508e-08, 0.999800205, -6.813071e-09, -0.0199879594))
    pressEKey(3)
    task.wait(50) -- Long wait here
    
    -- Location 3
    teleportTo(CFrame.new(-2286.60596, 3.53576541, 116.583023, 0.603433549, -1.70633161e-08, -0.79741329, 3.02324121e-09, 1, -1.911053e-08, 0.79741329, 9.12116249e-09, 0.603433549))
    pressEKey(3)
    task.wait(0.5)
    
    -- Location 4
    teleportTo(CFrame.new(-2285.86597, 3.53576517, 111.497025, 0.99666667, -2.55965151e-08, -0.0815816, 2.94076088e-08, 1, 4.55135449e-08, 0.0815816, -4.77609525e-08, 0.99666667))
    pressEKey(3)
    task.wait(0.5)
    
    -- Location 5
    teleportTo(CFrame.new(-2289.8335, 3.53576517, 110.762566, 0.896161199, -8.04538303e-08, 0.443728626, 6.22336813e-08, 1, 5.5625037e-08, -0.443728626, -2.22341345e-08, 0.896161199))
    pressEKey(3)
    task.wait(0.5)
    
    -- Final Location
    teleportTo(CFrame.new(-2369.85352, 3.10753202, -19.4299431, 0.915126443, -2.6753753e-08, 0.40316689, -1.79628912e-09, 1, 7.04363003e-08, -0.40316689, -6.51823271e-08, 0.915126443))
    
    Rayfield:Notify({
        Title = "Bank Autofarm",
        Content = "Farming completed!",
        Duration = 3,
        Image = "check-circle"
    })
    
    BankAutofarm.Running = false
end

-- ===== RAYFIELD UI =====
local BankButton = Tab:CreateButton({
    Name = "Start Bank Autofarm",
    Callback = function()
        if not BankAutofarm.Running then
            local success, err = pcall(executeBankAutofarm)
            if not success then
                Rayfield:Notify({
                    Title = "Error",
                    Content = "Failed: "..tostring(err),
                    Duration = 6,
                    Image = "alert-circle"
                })
                BankAutofarm.Running = false
            end
        else
            Rayfield:Notify({
                Title = "Warning",
                Content = "Already farming!",
                Duration = 3,
                Image = "alert-triangle"
            })
        end
    end,
})


------more stuff


local Tab = Window:CreateTab("Extra", "drama")

---bounty esp




local Label = Tab:CreateLabel("Press F9 to see Bounty report (AWP users jsut check AWP Console)", 2121212, Color3.fromRGB(255, 255, 255), false) -- Title, Icon, Color, IgnoreTheme

-- Variables
local bountyESPEnabled = false
local instantInteractEnabled = false
local bountyTags = {}
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ProximityPromptService = game:GetService("ProximityPromptService")

-- [Rest of your existing code remains exactly the same...]
-- Keep all the existing functions: createBountyTag, updateBountyTags, etc.
-- Keep all the existing UI elements: Scan Button, ESP Toggle, Instant Interact Toggle

-- Only modify the scanBounties function to add F9 reminder:
local function scanBounties()
    print("\n===== BOUNTY REPORT =====")
    print("Remember: Press F9 to view this console anytime!")
    local foundBounty = false
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player:FindFirstChild("stats") then
            local stats = player.stats
            if stats:FindFirstChild("Bounty") and stats.Bounty:IsA("IntValue") then
                local bountyValue = stats.Bounty.Value
                if bountyValue > 0 then
                    print(player.Name .. ": $" .. bountyValue)
                    foundBounty = true
                end
            end
        end
    end
    
    if not foundBounty then
        print("No active bounties found")
    end
    print("=======================\n")
    
    -- Show in-game notification about F9
    Rayfield:Notify({
        Title = "Bounty Scan Complete",
        Content = "Check console (F9) for results",
        Duration = 5,
        Image = 6023426915
    })
    
    return foundBounty
end



-- Variables
local bountyESPEnabled = false
local instantInteractEnabled = false
local bountyTags = {}
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ProximityPromptService = game:GetService("ProximityPromptService")

-- Bounty ESP Functions
local function createBountyTag(player)
    if not player.Character or not player.Character:FindFirstChild("Head") then return end
    
    local head = player.Character.Head
    
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "BountyTag"
    billboard.Adornee = head
    billboard.Size = UDim2.new(8, 0, 4, 0)
    billboard.StudsOffset = Vector3.new(0, 2, 0)
    billboard.AlwaysOnTop = true
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Parent = billboard
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.TextScaled = true
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextColor3 = Color3.new(1, 0, 0)
    textLabel.TextStrokeTransparency = 0
    
    billboard.Parent = player.Character
    bountyTags[player] = billboard
end

local function updateBountyTags()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local stats = player:FindFirstChild("stats")
            local bountyValue = stats and stats:FindFirstChild("Bounty") and stats.Bounty:IsA("IntValue") and stats.Bounty.Value or 0
            
            if bountyValue > 0 then
                if not bountyTags[player] then
                    createBountyTag(player)
                end
                bountyTags[player].TextLabel.Text = "$" .. bountyValue
            else
                if bountyTags[player] then
                    bountyTags[player]:Destroy()
                    bountyTags[player] = nil
                end
            end
        end
    end
end

-- Instant Interact Connection
local interactConnection
local function setupInstantInteract()
    interactConnection = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
        if instantInteractEnabled then
            fireproximityprompt(prompt)
        end
    end)
end

-- Scan Bounties Function
local function scanBounties()
    print("\n===== BOUNTY REPORT =====")
    local foundBounty = false
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player:FindFirstChild("stats") then
            local stats = player.stats
            if stats:FindFirstChild("Bounty") and stats.Bounty:IsA("IntValue") then
                local bountyValue = stats.Bounty.Value
                if bountyValue > 0 then
                    print(player.Name .. ": $" .. bountyValue)
                    foundBounty = true
                end
            end
        end
    end
    
    if not foundBounty then
        print("No active bounties found")
    end
    print("=======================\n")
    
    return foundBounty
end

-- Create UI Elements
Tab:CreateButton({
    Name = "Scan Bounties",
    Callback = function()
        if scanBounties() and not bountyESPEnabled then
            Rayfield:Notify({
                Title = "Bounties Found",
                Content = "Enable ESP to see them in-game",
                Duration = 3,
                Image = 6023426915
            })
        end
    end
})

local ESPToggle = Tab:CreateToggle({
    Name = "Bounty ESP",
    CurrentValue = false,
    Flag = "BountyESPToggle",
    Callback = function(Value)
        bountyESPEnabled = Value
        if bountyESPEnabled then
            -- Enable ESP
            RunService:BindToRenderStep("BountyESP", Enum.RenderPriority.First.Value, updateBountyTags)
            Rayfield:Notify({
                Title = "Bounty ESP Enabled",
                Content = "Players with bounties are now highlighted",
                Duration = 2,
                Image = 6023426915
            })
        else
            -- Disable ESP
            RunService:UnbindFromRenderStep("BountyESP")
            for player, tag in pairs(bountyTags) do
                tag:Destroy()
            end
            bountyTags = {}
            Rayfield:Notify({
                Title = "Bounty ESP Disabled",
                Content = "All bounty tags removed",
                Duration = 2,
                Image = 6023426915
            })
        end
    end
})

Tab:CreateToggle({
    Name = "Instant Interact",
    CurrentValue = false,
    Flag = "InstantInteractToggle",
    Callback = function(Value)
        instantInteractEnabled = Value
        if instantInteractEnabled then
            setupInstantInteract()
            Rayfield:Notify({
                Title = "Instant Interact ON",
                Content = "No more holding buttons",
                Duration = 2,
                Image = 6023426915
            })
        else
            if interactConnection then
                interactConnection:Disconnect()
            end
            Rayfield:Notify({
                Title = "Instant Interact OFF",
                Content = "Normal interactions restored",
                Duration = 2,
                Image = 6023426915
            })
        end
    end
})

-- Initial setup
setupInstantInteract()
scanBounties()














---test


local AUDIO_ID = 70918544931380
local VOLUME = 100

local function playHopSound()
    local sound = Instance.new("Sound")
    sound.SoundId = "rbxassetid://"..AUDIO_ID
    sound.Volume = VOLUME
    sound.Parent = game:GetService("SoundService")
    sound:Play()
    game:GetService("Debris"):AddItem(sound, 10) -- Clean up after 10 seconds
end

local function serverHop()
    -- Play audio first
    playHopSound()
    
    -- Wait for audio to start playing
    wait(1) 
    
    -- Find a new server
    local Http = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")
    
    local gameId = game.PlaceId
    local servers = {}
    
    -- Get server list
    local req = request({
        Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Asc&limit=100", gameId),
        Method = "GET"
    })
    
    local body = Http:JSONDecode(req.Body)
    for _, server in ipairs(body.data) do
        if server.playing ~= server.maxPlayers and server.id ~= game.JobId then
            table.insert(servers, server.id)
        end
    end
    
    -- Teleport to random server
    if #servers > 0 then
        TeleportService:TeleportToPlaceInstance(gameId, servers[math.random(1, #servers)])
    else
        Rayfield:Notify({
            Title = "Error",
            Content = "No available servers found",
            Duration = 5,
            Image = "alert-circle"
        })
    end
end

Tab:CreateButton({
    Name = "Server Hop",
    Callback = function()
        Rayfield:Notify({
            Title = "Server Hop Initiated",
            Content = "Finding new server...",
            Duration = 3,
            Image = "server"
        })
        serverHop()
    end
})

